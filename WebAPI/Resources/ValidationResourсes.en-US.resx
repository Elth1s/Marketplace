<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvantagesPropName" xml:space="preserve">
    <value>Advantages</value>
  </data>
  <data name="CategoryUrlSlugPropName" xml:space="preserve">
    <value>Category url slug</value>
  </data>
  <data name="CodeExactLengthMessage" xml:space="preserve">
    <value>Code must be 2 characters long</value>
  </data>
  <data name="CodePropName" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CommentMaxLengthPropName" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="CommentPropName" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="ConfirmationCodePropName" xml:space="preserve">
    <value>Confirmation code</value>
  </data>
  <data name="ConfirmPasswordPropName" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="ContainDigitMessage" xml:space="preserve">
    <value>{PropertyName} must contain at least one digit</value>
  </data>
  <data name="ContainLowercaseMessage" xml:space="preserve">
    <value>{PropertyName} must contain at least one lowercase letter</value>
  </data>
  <data name="ContainSpecialCharacterMessage" xml:space="preserve">
    <value>{PropertyName} must contain at least one special character</value>
  </data>
  <data name="ContainUppercaseMessage" xml:space="preserve">
    <value>{PropertyName} must contain at least one uppercase letter</value>
  </data>
  <data name="CountPropName" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="DateEndPropName" xml:space="preserve">
    <value>End date</value>
  </data>
  <data name="DateStartPropName" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="DescriptionNameProp" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DisadvantagesPropName" xml:space="preserve">
    <value>Disadvantages</value>
  </data>
  <data name="DiscountMaxPropName" xml:space="preserve">
    <value>Maximum discount</value>
  </data>
  <data name="DiscountMinPropName" xml:space="preserve">
    <value>Minimum discount</value>
  </data>
  <data name="EmailAddressPropName" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="EmailOrPhonePropName" xml:space="preserve">
    <value>Email address or phone number</value>
  </data>
  <data name="EndGreaterStart" xml:space="preserve">
    <value>End must be greater than start</value>
  </data>
  <data name="EnglishMeasurePropName" xml:space="preserve">
    <value>English Measure</value>
  </data>
  <data name="EnglishNamePropName" xml:space="preserve">
    <value>English name</value>
  </data>
  <data name="FilterGroupUniqueNameMessage" xml:space="preserve">
    <value>Filter group with this name already exists</value>
  </data>
  <data name="FirstNamePropName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="FullNamePropName" xml:space="preserve">
    <value>Full name</value>
  </data>
  <data name="GreaterThanMessage" xml:space="preserve">
    <value>{PropertyName} must be greater than {ComparisonValue}</value>
  </data>
  <data name="InformationRelevanceRatingPropName" xml:space="preserve">
    <value>Information relevance rating</value>
  </data>
  <data name="InvalidFormatMessage" xml:space="preserve">
    <value>{PropertyName} is not in the correct format</value>
  </data>
  <data name="MessagePropName" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="NamePropName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="OldPasswordPropName" xml:space="preserve">
    <value>Old password</value>
  </data>
  <data name="OrderByPropName" xml:space="preserve">
    <value>Order by</value>
  </data>
  <data name="OrderStatusUniqueNameMessage" xml:space="preserve">
    <value>Order status with this name already exists</value>
  </data>
  <data name="PagePropName" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="PasswordConfrimPasswordEqualMessage" xml:space="preserve">
    <value>Password and confirm password do not match</value>
  </data>
  <data name="PasswordMinLengthMessage" xml:space="preserve">
    <value>The length of passsord must be at least {MinLength} characters</value>
  </data>
  <data name="PasswordPropName" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PhonePropName" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="PluralGreaterThanMessage" xml:space="preserve">
    <value>{PropertyName} must be greater than {ComparisonValue}</value>
  </data>
  <data name="PluralLengthMessage" xml:space="preserve">
    <value>The length of {PropertyName} must be at least {MinLength} characters</value>
  </data>
  <data name="PluralRequiredMessage" xml:space="preserve">
    <value>{PropertyName} is required</value>
  </data>
  <data name="PriceNameProp" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="ProductRatingPropName" xml:space="preserve">
    <value>Product rating</value>
  </data>
  <data name="ProductStatusUniquesNameMessage" xml:space="preserve">
    <value>Product status with this name already exists</value>
  </data>
  <data name="ProductUrlSlugPropName" xml:space="preserve">
    <value>Product url slug</value>
  </data>
  <data name="RequiredMessage" xml:space="preserve">
    <value>{PropertyName} is required</value>
  </data>
  <data name="RowsPerPagePropName" xml:space="preserve">
    <value>Rows per page</value>
  </data>
  <data name="SecondNamePropName" xml:space="preserve">
    <value>Second name</value>
  </data>
  <data name="ServiceQualityRatingPropName" xml:space="preserve">
    <value>Service quality rating</value>
  </data>
  <data name="ShopUniqueEmailMessage" xml:space="preserve">
    <value>Shop with this email address already exists</value>
  </data>
  <data name="ShopUniqueSiteURLMessage" xml:space="preserve">
    <value>Shop with this site URL already exists</value>
  </data>
  <data name="SiteURLPropName" xml:space="preserve">
    <value>Site URL</value>
  </data>
  <data name="TextPropName" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TimeEndPropName" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="TimelinessRatingPropName" xml:space="preserve">
    <value>Timeliness rating</value>
  </data>
  <data name="TimeStartPropName" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TokenPropName" xml:space="preserve">
    <value>Token</value>
  </data>
  <data name="UkrainianMeasurePropName" xml:space="preserve">
    <value>Ukrainian Measure</value>
  </data>
  <data name="UkrainianNamePropName" xml:space="preserve">
    <value>Ukrainian name</value>
  </data>
  <data name="UserUniqueEmailMessage" xml:space="preserve">
    <value>User with this email already exists</value>
  </data>
  <data name="UserUniquePhoneMessage" xml:space="preserve">
    <value>User with this phone number already exists</value>
  </data>
  <data name="ValuePropName" xml:space="preserve">
    <value>Value</value>
  </data>
</root>